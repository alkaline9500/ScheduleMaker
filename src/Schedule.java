/**
 * Schedule Class
 * Represents one possible schedule
 * @author Nic Manoogian
 */

import java.util.ArrayList;

public class Schedule
{
    // List of shifts which need to be covered
    private ArrayList<Shift> shifts;
    // List of employees
    private ArrayList<Employee> employees;

    /**
     * Default constructor creates the empty ArrayLists
     */
    public Schedule()
    {
        shifts = new ArrayList<Shift>();
        employees = new ArrayList<Employee>();
    }
    
    /**
     * Constructs a Schedule using another Schedule
     * @param os other Schedule
     */
    public Schedule(Schedule os)
    {
        shifts = new ArrayList<Shift>();
        employees = new ArrayList<Employee>();

        for (Shift sh : os.getShifts())
        {
            shifts.add(sh.clone());
        }
        
        for (Employee ee : os.getEmployees())
        {
            employees.add(ee.clone());
        }
    }

    /**
     * Constructs an "empty" schedule using a list of shifts to be covered and a list of employees
     * @param shiftsFile file containing shifts
     * @param employeesFile file containing shifts
     */
    public Schedule(String shiftsFile, String employeesFile)
    {
        // Read file
    }

    /**
     * Determines if this configuration is the goal
     * @return if there are no shifts to be covered
     */
    public boolean isGoal()
    {
        return shifts.size() == 0;
    }

    /**
     * Returns a list of the new configurations generated by
     * giving the next available shift the the next available employee
     * @return a list of the new configurations
     */
    public ArrayList<Schedule> getNeighbors()
    {
        ArrayList<Schedule> neighborList = new ArrayList<Schedule>();
        
        for (Employee e : employees)
        {
            if (e.canWork(shifts.get(0)))
            {
                e.take(shifts.get(0));
                shifts.remove(0);
            }
        }

        return neighborList;
    }

    public ArrayList<Employee> getEmployees()
    {
        return employees;
    }

    public ArrayList<Shift> getShifts()
    {
        return shifts;
    }
}
